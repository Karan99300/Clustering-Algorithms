import numpy as np
import matplotlib.pyplot as plt

# Function to calculate distortion for a set of clusters
def calculate_distortion(clusters):
    distortion = 0
    for cluster in clusters:
        centroid = np.mean(cluster, axis=0)
        distortion += np.sum(np.linalg.norm(cluster - centroid, axis=1)**2)
    return distortion

# Function to perform simulated annealing for clustering
def simulated_annealing(X, N, T0, annealing_schedule):
    # Step 1: Initial partitioning
    clusters = [X[np.random.choice(len(X), size=N, replace=False)] for _ in range(N)]

    # Initial temperature
    Tn = T0

    # Initialize iteration count
    n = 0

    # Initialize distortion history for visualization
    distortion_history = []

    while True:
        # Step 2: Perturb clusters
        current_clusters = clusters.copy()
        pattern_index = np.random.randint(len(X))
        current_cluster_index = np.random.randint(N)
        new_cluster_index = np.random.randint(N)

        # Move the pattern to the new cluster
        pattern = current_clusters[current_cluster_index][pattern_index]
        current_clusters[current_cluster_index] = np.delete(current_clusters[current_cluster_index], pattern_index, axis=0)
        current_clusters[new_cluster_index] = np.vstack([current_clusters[new_cluster_index], pattern])

        # Calculate new centroids
        new_distortion = calculate_distortion(current_clusters)
        delta_D = new_distortion - calculate_distortion(clusters)

        # Step 3: Acceptance criterion
        if np.exp(-delta_D / Tn) > np.random.rand():
            clusters = current_clusters

        # Step 4: Check termination conditions
        distortion_history.append(new_distortion)
        if new_distortion <= 0 or n >= len(annealing_schedule):
            break

        # Update temperature and iteration count
        Tn = annealing_schedule[n]
        n += 1

    return clusters, distortion_history

# Sample data generation (you can replace this with your dataset)
np.random.seed(42)
X = np.concatenate([np.random.randn(20, 2) + [5, 5], np.random.randn(20, 2) + [10, 10]])

# Parameters
N = 2  # Number of clusters
T0 = 100  # Initial temperature
annealing_schedule = [100, 50, 25]  # Annealing schedule

# Run simulated annealing
result_clusters, distortion_history = simulated_annealing(X, N, T0, annealing_schedule)

# Visualize the result
for i, cluster in enumerate(result_clusters):
    plt.scatter(cluster[:, 0], cluster[:, 1], label=f'Cluster {i + 1}')

plt.title('Simulated Annealing Clustering')
plt.xlabel('X1')
plt.ylabel('X2')
plt.legend()
plt.show()

# Visualize distortion history
plt.plot(distortion_history)
plt.title('Distortion History during Simulated Annealing')
plt.xlabel('Iteration')
plt.ylabel('Distortion')
plt.show()
